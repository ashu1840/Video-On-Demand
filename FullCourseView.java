
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author officeworks
 */
public class FullCourseView extends javax.swing.JFrame {

    String coursename, email, status;
    String video;
    int amount;

    /**
     * Creates new form FullCourseView
     */
    public FullCourseView(String coursename, String email) {
        initComponents();
        int width = Toolkit.getDefaultToolkit().getScreenSize().width;
        int height = Toolkit.getDefaultToolkit().getScreenSize().height;
        setSize(width, height);

        this.coursename = coursename;
        this.email = email;
        new Thread(new fetch_job()).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lb7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lb1 = new javax.swing.JLabel();
        lb2 = new javax.swing.JLabel();
        lb3 = new javax.swing.JLabel();
        lb4 = new javax.swing.JLabel();
        lb5 = new javax.swing.JLabel();
        bt1 = new javax.swing.JButton();
        bt2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lb7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(lb7);
        lb7.setBounds(0, 0, 1270, 110);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setLayout(null);

        lb1.setText("squarephoto");
        jPanel1.add(lb1);
        lb1.setBounds(10, 10, 130, 130);

        lb2.setText("Name");
        jPanel1.add(lb2);
        lb2.setBounds(150, 20, 190, 20);

        lb3.setText("Pre-Requisite");
        jPanel1.add(lb3);
        lb3.setBounds(150, 60, 190, 30);

        lb4.setText("Category");
        jPanel1.add(lb4);
        lb4.setBounds(150, 110, 190, 20);

        lb5.setBackground(new java.awt.Color(255, 204, 204));
        lb5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lb5.setText("PRICE");
        lb5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lb5);
        lb5.setBounds(690, 10, 200, 30);

        bt1.setText("Pay to Subscribe");
        bt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt1ActionPerformed(evt);
            }
        });
        jPanel1.add(bt1);
        bt1.setBounds(690, 50, 200, 40);

        bt2.setText("View Sample Video");
        bt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt2ActionPerformed(evt);
            }
        });
        jPanel1.add(bt2);
        bt2.setBounds(690, 100, 200, 40);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 110, 1270, 170);

        jPanel2.setBackground(new java.awt.Color(102, 255, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);
        jScrollPane1.setViewportView(jPanel2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(2, 280, 1270, 340);

        pack();
    }// </editor-fold>                        

    private void bt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt1ActionPerformed
        // TODO add your handling code here:
        int r = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to subscribe");
        if (r == JOptionPane.YES_OPTION) {

            PaymentDemo obj = new PaymentDemo();
            obj.setVisible(true);
        }
    }

    class job_vid implements Runnable {

        @Override
        public void run() {
            // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            try {
                HttpResponse res = Unirest.get("http://" + GlobalData.host + "/Subscribe").queryString("coursename", coursename).queryString("email", email).asString();
                if (res.getBody().equals("success")) {
                    JOptionPane.showMessageDialog(rootPane, "Successfully Subscribed");
                    bt1.setEnabled(false);
                    new Thread(new fetch_job()).start();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Subscribe to get more Knowledge");
                }

            } catch (Exception ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_bt1ActionPerformed

    private void bt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt2ActionPerformed
        JavaFXMediaPlayerFrame obj = new JavaFXMediaPlayerFrame(video);
        obj.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_bt2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //  new FullCourseView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton bt1;
    private javax.swing.JButton bt2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb1;
    private javax.swing.JLabel lb2;
    private javax.swing.JLabel lb3;
    private javax.swing.JLabel lb4;
    private javax.swing.JLabel lb5;
    private javax.swing.JLabel lb7;
    // End of variables declaration                   

    class fetch_job implements Runnable {

        @Override
        public void run() {
            try {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

                HttpResponse res = Unirest.get("http://" + GlobalData.host + "/Getdata").queryString("coursename", coursename).queryString("email", email).asString();
                StringTokenizer st2 = new StringTokenizer(res.getBody().toString(), ";");
                String cname = st2.nextToken();
                String pre = st2.nextToken();
                String cat = st2.nextToken();
                String squarephoto = st2.nextToken();
                amount = Integer.parseInt(st2.nextToken());
                String widephoto = st2.nextToken();
                video = st2.nextToken();
                status = st2.nextToken();
                if (status.equalsIgnoreCase("yes")) {
                    bt1.setEnabled(false);
                } else {
                    bt1.setEnabled(true);

                }
                System.out.println(squarephoto + " -----" + widephoto);
                lb2.setText("Course " + cname);
                lb3.setText("Pre-requisite " + pre);
                lb4.setText("Category " + cat);
                lb5.setText("Price $" + amount);

                try {
                    BufferedImage myimage = ImageIO.read(new URL("http://" + GlobalData.host + "/GetSource/" + squarephoto));
                    BufferedImage newimg = resize(myimage, lb1.getWidth(), lb1.getHeight());
                    lb1.setIcon(new ImageIcon(newimg));
                } catch (Exception ex) {
                    Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
                }
                //BufferedImage newimg= resize(myimage,lb1.getWidth(),lb1.getHeight());
                //lb1.setIcon(new ImageIcon(newimg));

                //  BufferedImage myimage;
                try {
                    BufferedImage myimage = ImageIO.read(new URL("http://" + GlobalData.host + "/GetSource/" + widephoto));

                    BufferedImage newimg = resize(myimage, lb7.getWidth(), lb7.getHeight());
                    lb7.setIcon(new ImageIcon(newimg));
                } catch (Exception ex) {
                    Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
                }
                //BufferedImage newimg= resize(myimage,lb7.getWidth(),lb7.getHeight());
                //lb7.setIcon(new ImageIcon(newimg));

                new Thread(new job_video()).start();

            } catch (UnirestException ex) {
                //Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }

        BufferedImage resize(BufferedImage image, int width, int height) {
            BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
            Graphics2D g2d = (Graphics2D) bi.createGraphics();
            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
            g2d.drawImage(image, 0, 0, width, height, null);
            g2d.dispose();
            return bi;
        }
    }

    class job_video implements Runnable {

        @Override
        public void run() {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            try {
                jPanel2.removeAll();
                jPanel2.repaint();
                HttpResponse res = Unirest.get("http://" + GlobalData.host + "/Streamvideos").queryString("coursename", coursename).asString();
                StringTokenizer st = new StringTokenizer(res.getBody().toString(), "~");
                int count = st.countTokens();
                FetchVideos fv[] = new FetchVideos[count];
                int rows = 1;
                if (count % 5 == 0) {
                    rows = count / 5;
                } else {
                    rows = count / 5;
                    rows += 1;
                }
                System.out.println("Rows" + rows);
                jPanel2.setPreferredSize(new Dimension(WIDTH - 50, rows * 310));
                int x = 25, y = 25;
                for (int i = 0; i < count; i++) {
                    String lectureRow = st.nextToken();
                    StringTokenizer st2 = new StringTokenizer(lectureRow, ";");

                    fv[i] = new FetchVideos();
                    fv[i].setBounds(x, y, 226, 279);
                    int lectureno = Integer.parseInt(st2.nextToken());
                    String title = st2.nextToken();
                    int duration = Integer.parseInt(st2.nextToken());
                    String thumbnail = st2.nextToken();
                    String video = st2.nextToken();

                    fv[i].lb2.setText("Lecture No. " + lectureno);
                    fv[i].lb3.setText("Title " + title);
                    fv[i].lb4.setText("Duration " + duration);
                    // fv[i].lb1.setText(thumbnail);
                    BufferedImage myimage = ImageIO.read(new URL("http://" + GlobalData.host + "/GetSource/" + thumbnail));

                    BufferedImage newimg = resize(myimage, lb1.getWidth(), lb1.getHeight());
                    fv[i].lb1.setIcon(new ImageIcon(newimg));

                    fv[i].bt_download.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                            DownloadFrame obj = new DownloadFrame(video);
                            obj.setVisible(true);
                        }
                    }
                    );

                    // System.out.println("status ="+status);
                    if (status.equalsIgnoreCase("yes")) {
                        fv[i].bt_play.setEnabled(true);
                        fv[i].bt_download.setEnabled(true);

                        fv[i].bt_play.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                JavaFXMediaPlayerFrame obj = new JavaFXMediaPlayerFrame(video);
                                obj.setVisible(true);
                            }
                        });
                    } else {
                        fv[i].bt_play.setEnabled(false);
                        fv[i].bt_download.setEnabled(false);
                    }
                    if (x < 900) {
                        x += 240;
                    } else {
                        y += 310;
                        x = 25;
                    }
                    jPanel2.add(fv[i]);
                    jPanel2.repaint();

                }

            } catch (Exception ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        // BufferedImage myimage = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + thumbnail));
        //               BufferedImage newimg = resize(myimage, lb1.getWidth(), lb1.getHeight());
        //             lb1.setIcon(new ImageIcon(newimg));

        BufferedImage resize(BufferedImage image, int width, int height) {
            BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
            Graphics2D g2d = (Graphics2D) bi.createGraphics();
            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
            g2d.drawImage(image, 0, 0, width, height, null);
            g2d.dispose();
            return bi;
        }
    }

    public class PaymentDemo extends javax.swing.JFrame {

        public PaymentDemo() {
            initComponents();
            Browser browser = new Browser();
            BrowserView view = new BrowserView(browser);
            add(view, BorderLayout.CENTER);
            view.setBounds(0, 0, 500, 500);

            setSize(1000, 1000);
            setVisible(true);
            amount = amount * 100;
            browser.loadHTML("<!DOCTYPE html>\n"
                    + "<html>\n"
                    + "    <head>\n"
                    + "        <title>TODO supply a title</title>\n"
                    + "        <meta charset=\"UTF-8\">\n"
                    + "        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                    + "    </head>\n"
                    + "    <body>\n"
                    + "\n"
                    + "        <h1>VMM Payment Gateway Demo</h1>\n"
                    + "\n"
                    + "        <form action=\"\" method=\"POST\">\n"
                    + "            <!-- Note that the amount is in paise = 50 INR -->\n"
                    + "            <script\n"
                    + "                src=\"https://checkout.razorpay.com/v1/checkout.js\"\n"
                    + "                data-key=\"rzp_test_96HeaVmgRvbrfT\"\n"
                    + "                data-amount=\"" + amount + "\"\n"
                    + "                data-buttontext=\"Pay with Razorpay\"\n"
                    + "                data-name=\"VMM Education\"\n"
                    + "                data-description=\"Thank You for purchaing Silver Package.\"\n"
                    + "                data-image=\"http://vmmeducation.com/images/newlogo.png\"\n"
                    + "                data-prefill.name=\"Amrinder Singh\"\n"
                    + "                data-prefill.email=\"amrinder@vmmeducation.com\"\n"
                    + "                data-theme.color=\"#F3EE54\"\n"
                    + "            ></script>\n"
                    + "            <input type=\"hidden\" value=\"Hidden Element\" name=\"hidden\">\n"
                    + "        </form>\n"
                    + "\n"
                    + "   <h1>Please close the page to proceed</h1> </body>\n"
                    + "</html>\n"
                    + "");

        }

        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        new Thread(new job_vid()).start();

    }//GEN-LAST:event_formWindowClosing

        /**
         * @param args the command line arguments
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
