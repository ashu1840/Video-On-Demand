
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author officeworks
 */
public class ViewUser extends javax.swing.JFrame {

    String email;

    /**
     * Creates new form ViewUser
     */
    public ViewUser(String email) {
        initComponents();
        setSize(800, 800);
        this.email = email;
        new Thread(new job_viewUser()).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_phot = new javax.swing.JLabel();
        lb_name = new javax.swing.JLabel();
        lb_con = new javax.swing.JLabel();
        lb_ema = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lb_phot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(lb_phot);
        lb_phot.setBounds(40, 50, 140, 130);

        lb_name.setText("Name");
        getContentPane().add(lb_name);
        lb_name.setBounds(190, 50, 100, 40);

        lb_con.setText("Phone");
        getContentPane().add(lb_con);
        lb_con.setBounds(190, 100, 170, 40);

        lb_ema.setText("Email");
        getContentPane().add(lb_ema);
        lb_ema.setBounds(190, 150, 130, 60);

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("My Subscriptions");
        jLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.MatteBorder(null), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 153))));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(160, 220, 270, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    class job_viewUser implements Runnable {

        @Override
        public void run() {
            try {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                HttpResponse res = Unirest.get("http://"+GlobalData.host+"/UserFetch").queryString("email", email).asString();
                if (res.getBody().
                        equals("fail")) {
                    JOptionPane.showMessageDialog(rootPane, "fail");
                } else {
                    StringTokenizer st = new StringTokenizer(res.getBody().toString(), ";");
                    String photo = st.nextToken();
                    BufferedImage myimage = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + photo));

                    String name = st.nextToken();
                    String phone = st.nextToken();
                    String email = st.nextToken();
                    BufferedImage resize = resize(myimage, lb_phot.getWidth(), lb_phot.getHeight());
                    lb_phot.setIcon(new ImageIcon(resize));
                    lb_name.setText(name);
                    lb_con.setText(phone);
                    lb_ema.setText(email);

                    new Thread(new job_sub()).start();
                }
            } catch (Exception ex) {
                //Logger.getLogger(ViewUser.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new ViewUser().setVisible(true);
            }
        });
    }

    class job_sub implements Runnable {

        @Override
        public void run() {
            try {
                //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                HttpResponse res = Unirest.get("http://"+GlobalData.host+"/sub").queryString("email", email).asString();
                StringTokenizer st2 = new StringTokenizer(res.getBody().toString(), "~");
                System.out.println("reponse " + res.getBody());

                int count = st2.countTokens();
                SingleCoursePanel arr[] = new SingleCoursePanel[count];
int x=10;
int y=325;
                for (int i = 0; i < count; i++) {
                    String one = st2.nextToken();
                    StringTokenizer st3;
                    st3 = new StringTokenizer(one, ";");
                    String squarephoto = st3.nextToken();
                    String coursename = st3.nextToken();
                    BufferedImage myimage = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + squarephoto));
                    arr[i] = new SingleCoursePanel();
                    arr[i].setBounds(x, y, 149, 149);
                    
                    BufferedImage resize = resize(myimage, arr[i].lb1.getWidth(), arr[i].lb1.getHeight());
                    arr[i].lb1.setIcon(new ImageIcon(resize));
                    arr[i].lb2.setText(coursename);
                    arr[i].lb3.setText("");
                    add(arr[i]);
                    repaint();
                    
                    if(x>500)
                    {
                        y=y+180;
                        x=10;
                    }
else
                    {
                        x=x+170;
                    }
                }

            } catch (Exception ex) {
                //Logger.getLogger(ViewUser.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }

        }

    }

    BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lb_con;
    private javax.swing.JLabel lb_ema;
    private javax.swing.JLabel lb_name;
    private javax.swing.JLabel lb_phot;
    // End of variables declaration//GEN-END:variables
}
